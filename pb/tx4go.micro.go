// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: tx4go.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	tx4go.proto

It has these top-level messages:
	TxReq
	TxRsp
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Tx service

type TxService interface {
	Register(ctx context.Context, in *TxReq, opts ...client.CallOption) (*TxRsp, error)
	Commit(ctx context.Context, in *TxReq, opts ...client.CallOption) (*TxRsp, error)
	Rollback(ctx context.Context, in *TxReq, opts ...client.CallOption) (*TxRsp, error)
	Cancel(ctx context.Context, in *TxReq, opts ...client.CallOption) (*TxRsp, error)
	Confirm(ctx context.Context, in *TxReq, opts ...client.CallOption) (*TxRsp, error)
	Timeout(ctx context.Context, in *TxReq, opts ...client.CallOption) (*TxRsp, error)
}

type txService struct {
	c    client.Client
	name string
}

func NewTxService(name string, c client.Client) TxService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pb"
	}
	return &txService{
		c:    c,
		name: name,
	}
}

func (c *txService) Register(ctx context.Context, in *TxReq, opts ...client.CallOption) (*TxRsp, error) {
	req := c.c.NewRequest(c.name, "Tx.Register", in)
	out := new(TxRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txService) Commit(ctx context.Context, in *TxReq, opts ...client.CallOption) (*TxRsp, error) {
	req := c.c.NewRequest(c.name, "Tx.Commit", in)
	out := new(TxRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txService) Rollback(ctx context.Context, in *TxReq, opts ...client.CallOption) (*TxRsp, error) {
	req := c.c.NewRequest(c.name, "Tx.Rollback", in)
	out := new(TxRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txService) Cancel(ctx context.Context, in *TxReq, opts ...client.CallOption) (*TxRsp, error) {
	req := c.c.NewRequest(c.name, "Tx.Cancel", in)
	out := new(TxRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txService) Confirm(ctx context.Context, in *TxReq, opts ...client.CallOption) (*TxRsp, error) {
	req := c.c.NewRequest(c.name, "Tx.Confirm", in)
	out := new(TxRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txService) Timeout(ctx context.Context, in *TxReq, opts ...client.CallOption) (*TxRsp, error) {
	req := c.c.NewRequest(c.name, "Tx.Timeout", in)
	out := new(TxRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tx service

type TxHandler interface {
	Register(context.Context, *TxReq, *TxRsp) error
	Commit(context.Context, *TxReq, *TxRsp) error
	Rollback(context.Context, *TxReq, *TxRsp) error
	Cancel(context.Context, *TxReq, *TxRsp) error
	Confirm(context.Context, *TxReq, *TxRsp) error
	Timeout(context.Context, *TxReq, *TxRsp) error
}

func RegisterTxHandler(s server.Server, hdlr TxHandler, opts ...server.HandlerOption) error {
	type tx interface {
		Register(ctx context.Context, in *TxReq, out *TxRsp) error
		Commit(ctx context.Context, in *TxReq, out *TxRsp) error
		Rollback(ctx context.Context, in *TxReq, out *TxRsp) error
		Cancel(ctx context.Context, in *TxReq, out *TxRsp) error
		Confirm(ctx context.Context, in *TxReq, out *TxRsp) error
		Timeout(ctx context.Context, in *TxReq, out *TxRsp) error
	}
	type Tx struct {
		tx
	}
	h := &txHandler{hdlr}
	return s.Handle(s.NewHandler(&Tx{h}, opts...))
}

type txHandler struct {
	TxHandler
}

func (h *txHandler) Register(ctx context.Context, in *TxReq, out *TxRsp) error {
	return h.TxHandler.Register(ctx, in, out)
}

func (h *txHandler) Commit(ctx context.Context, in *TxReq, out *TxRsp) error {
	return h.TxHandler.Commit(ctx, in, out)
}

func (h *txHandler) Rollback(ctx context.Context, in *TxReq, out *TxRsp) error {
	return h.TxHandler.Rollback(ctx, in, out)
}

func (h *txHandler) Cancel(ctx context.Context, in *TxReq, out *TxRsp) error {
	return h.TxHandler.Cancel(ctx, in, out)
}

func (h *txHandler) Confirm(ctx context.Context, in *TxReq, out *TxRsp) error {
	return h.TxHandler.Confirm(ctx, in, out)
}

func (h *txHandler) Timeout(ctx context.Context, in *TxReq, out *TxRsp) error {
	return h.TxHandler.Timeout(ctx, in, out)
}
