// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tx4go.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TxReq struct {
	ToId                 string   `protobuf:"bytes,1,opt,name=ToId,proto3" json:"ToId,omitempty"`
	FromId               string   `protobuf:"bytes,2,opt,name=FromId,proto3" json:"FromId,omitempty"`
	FromServerUUID       string   `protobuf:"bytes,3,opt,name=FromServerUUID,proto3" json:"FromServerUUID,omitempty"`
	FromServerName       string   `protobuf:"bytes,4,opt,name=FromServerName,proto3" json:"FromServerName,omitempty"`
	FromServerAddr       string   `protobuf:"bytes,5,opt,name=FromServerAddr,proto3" json:"FromServerAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxReq) Reset()         { *m = TxReq{} }
func (m *TxReq) String() string { return proto.CompactTextString(m) }
func (*TxReq) ProtoMessage()    {}
func (*TxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75bfb7a6f677e24, []int{0}
}

func (m *TxReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxReq.Unmarshal(m, b)
}
func (m *TxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxReq.Marshal(b, m, deterministic)
}
func (m *TxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxReq.Merge(m, src)
}
func (m *TxReq) XXX_Size() int {
	return xxx_messageInfo_TxReq.Size(m)
}
func (m *TxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TxReq.DiscardUnknown(m)
}

var xxx_messageInfo_TxReq proto.InternalMessageInfo

func (m *TxReq) GetToId() string {
	if m != nil {
		return m.ToId
	}
	return ""
}

func (m *TxReq) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *TxReq) GetFromServerUUID() string {
	if m != nil {
		return m.FromServerUUID
	}
	return ""
}

func (m *TxReq) GetFromServerName() string {
	if m != nil {
		return m.FromServerName
	}
	return ""
}

func (m *TxReq) GetFromServerAddr() string {
	if m != nil {
		return m.FromServerAddr
	}
	return ""
}

type TxRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxRsp) Reset()         { *m = TxRsp{} }
func (m *TxRsp) String() string { return proto.CompactTextString(m) }
func (*TxRsp) ProtoMessage()    {}
func (*TxRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75bfb7a6f677e24, []int{1}
}

func (m *TxRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxRsp.Unmarshal(m, b)
}
func (m *TxRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxRsp.Marshal(b, m, deterministic)
}
func (m *TxRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxRsp.Merge(m, src)
}
func (m *TxRsp) XXX_Size() int {
	return xxx_messageInfo_TxRsp.Size(m)
}
func (m *TxRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_TxRsp.DiscardUnknown(m)
}

var xxx_messageInfo_TxRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TxReq)(nil), "pb.TxReq")
	proto.RegisterType((*TxRsp)(nil), "pb.TxRsp")
}

func init() { proto.RegisterFile("tx4go.proto", fileDescriptor_e75bfb7a6f677e24) }

var fileDescriptor_e75bfb7a6f677e24 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xa9, 0x30, 0x49,
	0xcf, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x5a, 0xcd, 0xc8, 0xc5,
	0x1a, 0x52, 0x11, 0x94, 0x5a, 0x28, 0x24, 0xc4, 0xc5, 0x12, 0x92, 0xef, 0x99, 0x22, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x66, 0x0b, 0x89, 0x71, 0xb1, 0xb9, 0x15, 0xe5, 0xe7, 0x7a, 0xa6,
	0x48, 0x30, 0x81, 0x45, 0xa1, 0x3c, 0x21, 0x35, 0x2e, 0x3e, 0x10, 0x2b, 0x38, 0xb5, 0xa8, 0x2c,
	0xb5, 0x28, 0x34, 0xd4, 0xd3, 0x45, 0x82, 0x19, 0x2c, 0x8f, 0x26, 0x8a, 0xaa, 0xce, 0x2f, 0x31,
	0x37, 0x55, 0x82, 0x05, 0x5d, 0x1d, 0x48, 0x14, 0x55, 0x9d, 0x63, 0x4a, 0x4a, 0x91, 0x04, 0x2b,
	0xba, 0x3a, 0x90, 0xa8, 0x12, 0x3b, 0xd8, 0xb1, 0xc5, 0x05, 0x46, 0xd7, 0x18, 0xb9, 0x98, 0x42,
	0x2a, 0x84, 0x94, 0xb8, 0x38, 0x82, 0x52, 0xd3, 0x33, 0x8b, 0x4b, 0x52, 0x8b, 0x84, 0x38, 0xf5,
	0x0a, 0x92, 0xf4, 0xc0, 0x5e, 0x91, 0x82, 0x31, 0x8b, 0x0b, 0x94, 0x18, 0x84, 0x14, 0xb8, 0xd8,
	0x9c, 0xf3, 0x73, 0x73, 0x33, 0x4b, 0x70, 0xaa, 0x00, 0x99, 0x92, 0x9f, 0x93, 0x93, 0x94, 0x98,
	0x9c, 0x8d, 0xd7, 0x94, 0xc4, 0xbc, 0xe4, 0xd4, 0x1c, 0x9c, 0x2a, 0x14, 0xb9, 0xd8, 0x9d, 0xf3,
	0xf3, 0xd2, 0x32, 0x8b, 0x72, 0xf1, 0x29, 0x09, 0xc9, 0xcc, 0x4d, 0xcd, 0x2f, 0xc5, 0xe9, 0x96,
	0x24, 0x36, 0x70, 0xd4, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x91, 0x7a, 0xd1, 0x83, 0xa9,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TxClient is the client API for Tx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TxClient interface {
	Register(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxRsp, error)
	Commit(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxRsp, error)
	Rollback(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxRsp, error)
	Cancel(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxRsp, error)
	Confirm(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxRsp, error)
	Timeout(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxRsp, error)
}

type txClient struct {
	cc *grpc.ClientConn
}

func NewTxClient(cc *grpc.ClientConn) TxClient {
	return &txClient{cc}
}

func (c *txClient) Register(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxRsp, error) {
	out := new(TxRsp)
	err := c.cc.Invoke(ctx, "/pb.Tx/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) Commit(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxRsp, error) {
	out := new(TxRsp)
	err := c.cc.Invoke(ctx, "/pb.Tx/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) Rollback(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxRsp, error) {
	out := new(TxRsp)
	err := c.cc.Invoke(ctx, "/pb.Tx/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) Cancel(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxRsp, error) {
	out := new(TxRsp)
	err := c.cc.Invoke(ctx, "/pb.Tx/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) Confirm(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxRsp, error) {
	out := new(TxRsp)
	err := c.cc.Invoke(ctx, "/pb.Tx/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) Timeout(ctx context.Context, in *TxReq, opts ...grpc.CallOption) (*TxRsp, error) {
	out := new(TxRsp)
	err := c.cc.Invoke(ctx, "/pb.Tx/Timeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TxServer is the server API for Tx service.
type TxServer interface {
	Register(context.Context, *TxReq) (*TxRsp, error)
	Commit(context.Context, *TxReq) (*TxRsp, error)
	Rollback(context.Context, *TxReq) (*TxRsp, error)
	Cancel(context.Context, *TxReq) (*TxRsp, error)
	Confirm(context.Context, *TxReq) (*TxRsp, error)
	Timeout(context.Context, *TxReq) (*TxRsp, error)
}

func RegisterTxServer(s *grpc.Server, srv TxServer) {
	s.RegisterService(&_Tx_serviceDesc, srv)
}

func _Tx_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Tx/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).Register(ctx, req.(*TxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Tx/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).Commit(ctx, req.(*TxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Tx/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).Rollback(ctx, req.(*TxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Tx/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).Cancel(ctx, req.(*TxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Tx/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).Confirm(ctx, req.(*TxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_Timeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).Timeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Tx/Timeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).Timeout(ctx, req.(*TxReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tx_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Tx",
	HandlerType: (*TxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Tx_Register_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Tx_Commit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _Tx_Rollback_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Tx_Cancel_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _Tx_Confirm_Handler,
		},
		{
			MethodName: "Timeout",
			Handler:    _Tx_Timeout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tx4go.proto",
}
